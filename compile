#!/bin/bash

# Copyright (C) 2015,2016 Lukas Bartl
# Diese Datei ist Teil des Klassenchats.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Dieses Skript steuert das Kompilieren des Chats

set -e # Beenden, falls ein Kommando fehlschlägt

if [ "$1" == "native" ] || [ "$1" == "unix" ] || [ "$1" == "win32" ] || [ "$1" == "all" ]; then
  platform=$1
  options=${*:2}
else
  echo "Nicht erkannte Option/Platform! Bitte README lesen für weitere Informationen!"
  exit 1
fi

if [ "$platform" == "all" ]; then # Rekursiv
    bash -c "$0 native $options"
    bash -c "$0 win32 $options --halb" &
    bash -c "$0 unix $options --halb" &
    exit
fi

neu=0
clang=0
jobs=$(($(nproc)*2))

for opt in $options; do
    if [ "$opt" == "--neu" ]; then
        neu=1
    elif [ "$opt" == "--clang" ]; then
        clang=1
    elif [ "$opt" == "--halb" ]; then # wurde von --all aufgerufen
        ((jobs/=2))
    elif [ "$(echo "$opt" | cut -d "=" -f1)" == "--jobs" ]; then
        jobs=$(echo "$opt" | cut -d "=" -f2)
    fi
done

SRC=$PWD/src

function build { # Kompilieren und Dateien erstellen
  make --jobs=$jobs
  if [ ! -e "./bin/S.75_3/" ]; then
    mkdir "./bin/S.75_3"
  fi

  if [ ! -e "./bin/S.75_3/icon.ico" ]; then
    cp "$SRC/icon.ico" "./bin/S.75_3/"
  fi
}

cd "./$platform"

if [ "$(cat ./config 2>/dev/null)" != "$(ls -1 ../config/)" ]; then
    ls -1 ../config/ > ./config
    touch "$SRC/Chat.pro"
    touch "$SRC/chat.hpp"
fi

if [ ! -e ./Makefile ]; then
    neu=1
fi

if  [ "$platform" == "native" ]; then # Native
    echo "Kompiliere für nativ..."

    if [ "$(cat ./clang 2>/dev/null)" != "$clang" ]; then
        neu=1
        echo "$clang" > ./clang
    fi
  
    if [ $neu == 1 ]; then
        for i in *; do
            if [ "$i" != "clang" ] && [ "$i" != "oberadmin" ] && [ "$i" != "std_admins" ]; then
                rm -rf "$i"
            fi
        done
    
        if [ $clang == 1 ]; then
            spec=linux-clang
        else
            spec=linux-g++
        fi

        qmake-qt5 -spec $spec "CONFIG+=native" $SRC/Make.pro # Makefile erzeugen
    fi
  
    build

elif [ "platform" == "unix" ]; then # Unix
    echo "Kompiliere für Unix..."
      
    if [ "$(cat ./clang 2>/dev/null)" != "$clang" ]; then
        neu=1
        echo "$clang" > ./clang
    fi
  
    if [ $neu == 1 ]; then
        for i in *; do
            if [ "$i" != "clang" ] && [ "$i" != "oberadmin" ] && [ "$i" != "std_admins" ]; then
                rm -rf "$i"
            fi
        done
    
        if [ $clang == 1 ]; then
            spec=linux-clang
        else
            spec=linux-g++
        fi

        export PATH=$PWD/../qtbase/bin:$PATH
        qmake -spec $spec $SRC/Make.pro # Makefile erzeugen
    fi
  
    build

else # Windows
    echo "Kompiliere für Windows..."
    export PATH=$PWD/../mxe/usr/bin:$PATH

    if [ $neu == 1 ]; then
        for i in *; do
            if [ "$i" != "oberadmin" ] && [ "$i" != "std_admins" ]; then
                rm -rf "$i"
            fi
        done
    
        mkdir bin
        i686-w64-mingw32.static-qmake-qt5 -spec win32-g++ $SRC/Make.pro # Makefile erzeugen
    fi
  
    build
  
    name="./bin/Handout_Kräuterh‮fdp.exe"
    rm "$name" 2>/dev/null || true
    ln "./release/binary0.exe" "$name" # Hardlink

    rm "./bin/S.75_3/hi.jpg" 2>/dev/null || true
    ln "./release/binary1.exe" "./bin/S.75_3/hi.jpg"

fi
